const Track = require('./Track')
const { Talk, _ } = require('./Talk')
const TrackSettings = require('./TrackSettings')
const Duration = require('./Duration')


function createTestTrack() {
    return new Track('TestTrack', TrackSettings.default)
}

describe('Track.constructor', () => {
    describe('does not throw', () => {
        test('when called with valid settings', () => {
            expect(() => createTestTrack).not.toThrow()
        })
    })
})

describe('Track.isSatisfied', () => {
    describe('returns false', () => {
        test('for empty Track.', () => {
            const track = createTestTrack()
            expect(track.isSatisfied).toBe(false)
        })
        test('for Track containing a single Talk.', () => {
            const track = createTestTrack()
            const halfHourTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(30))
            track.tryAdd(halfHourTalk)
            expect(track.isSatisfied).toBe(false)
        })
        test('when both Sessions are not satisfied.', () => {
            const track = createTestTrack()
            track.tryAdd(new Talk('Unsatisfying', Duration.fromMinutes(120)))
            track.tryAdd(new Talk('Unsatisfying', Duration.fromMinutes(120)))
            expect(track.isSatisfied).toBe(false)
        })
        test('when only the morning Session is satisfied.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(180))
            const afterNoonTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(120))
            track.tryAdd(morningTalk)
            track.tryAdd(afterNoonTalk)
            expect(track.morning.isSatisfied).toBe(true)
            expect(track.isSatisfied).toBe(false)
        })
        test('when only the afternoon Session is satisfied.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(120))
            const afterNoonTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(180))
            track.tryAdd(morningTalk)
            track.tryAdd(afterNoonTalk)
            expect(track.afternoon.isSatisfied).toBe(true)
            expect(track.isSatisfied).toBe(false)
        })
    })
    describe('returns true', () => {
        test('when both Sessions are satisfied but not maxed out.', () => {
            const track = createTestTrack()
            track.tryAdd(new Talk('Basic Arithmetics', Duration.fromMinutes(180)))
            track.tryAdd(new Talk('Basic Arithmetics', Duration.fromMinutes(180)))
            expect(track.isSatisfied).toBe(true)
        })
        test('when both Sessions are satisfied and maxed out.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(180))
            const afterNoonTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(240))
            track.tryAdd(morningTalk)
            track.tryAdd(afterNoonTalk)
            expect(track.isSatisfied).toBe(true)
        })
    })
})

describe('Track.talks', () => {
    describe('returns empty list', () => {
        test('for new Track.', () => {
            const track = createTestTrack()
            expect(track.talks.length).toBe(0)
        })
        test('after failing to add a Talk to a new Track.', () => {
            const track = createTestTrack()
            const talk = new Talk('The Importance of Reading The Manual', Duration.fromMinutes(360))
            track.tryAdd(talk)
            expect(track.talks.length).toBe(0)
        })
    })
    describe('lists all added Talks', () => {
        test('for a single added Talk.', () => {
            const track = createTestTrack()
            const talk = new Talk('Enjoying being alone', Duration.fromMinutes(60))
            track.tryAdd(talk)
            expect(track.talks).toContain(talk)
        })
        test('for many added Talks.', () => {
            const track = createTestTrack()
            const firstTalk = new Talk('Being Early', Duration.fromMinutes(60))
            const secondTalk = new Talk('The Golden Middle', Duration.fromMinutes(60))
            const thirdTalk = new Talk('Being Last', Duration.fromMinutes(60))
            track.tryAdd(firstTalk)
            track.tryAdd(secondTalk)
            track.tryAdd(thirdTalk)
            expect(track.talks).toContain(firstTalk)
            expect(track.talks).toContain(secondTalk)
            expect(track.talks).toContain(thirdTalk)
        })
        test('after trying to overfill the Track.', () => {
            const track = createTestTrack()
            const firstTalk = new Talk('Being Early', Duration.fromMinutes(180))
            const secondTalk = new Talk('The Golden Middle', Duration.fromMinutes(120))
            const thirdTalk = new Talk('Being Last', Duration.fromMinutes(120))
            const fourthTalk = new Talk('Being Too Late', Duration.fromMinutes(120))
            track.tryAdd(firstTalk)
            track.tryAdd(secondTalk)
            track.tryAdd(thirdTalk)
            track.tryAdd(fourthTalk)
            expect(track.talks).toContain(firstTalk)
            expect(track.talks).toContain(secondTalk)
            expect(track.talks).toContain(thirdTalk)
            expect(track.talks).not.toContain(fourthTalk)
        })
    })
})

describe('Track.tryAdd', () => {
    describe('throws Error', () => {
        test('when trying to add the same talk twice into the same session', () => {
            const track = createTestTrack()
            const talk = new Talk('There can only be one', Duration.fromHours(1))
            track.tryAdd(talk)
            expect(() => track.tryAdd(talk)).toThrow(Error)
        })
        test('when adding a talk that is already added to the morning into the afternoon', () => {
            const track = createTestTrack()
            const doubledTalk = new Talk('There can only be one', Duration.fromHours(3))
            track.tryAdd(doubledTalk)
            expect(() => track.tryAdd(doubledTalk)).toThrow(Error)
        })
        test('when adding a talk that is already added to the afternoon into the morning', () => {
            const track = createTestTrack()
            const morningBlocker = new Talk('Blocker', Duration.fromHours(3))
            const doubledTalk = new Talk('There can only be one', Duration.fromHours(1))
            track.tryAdd(morningBlocker)
            track.tryAdd(doubledTalk)
            track.remove(morningBlocker.id)
            expect(() => track.tryAdd(doubledTalk)).toThrow(Error)
        })
    })
    describe('returns true and adds Talk', () => {
        test('for Talk that does not max out any Sessions.', () => {
            const track = createTestTrack()
            const talk = new Talk('Basic Arithmetics', Duration.fromMinutes(60))
            const added = track.tryAdd(talk)
            expect(added).toBe(true)
            expect(track.talks).toContain(talk)
        })
        test('for multiple Talks that do not max out any Sessions.', () => {
            const track = createTestTrack()
            const firstTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(60))
            const secondTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(60))
            const thirdTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(60))
            let added = track.tryAdd(firstTalk)
            expect(added).toBe(true)
            added = track.tryAdd(secondTalk)
            expect(added).toBe(true)
            added = track.tryAdd(thirdTalk)
            expect(added).toBe(true)
            expect(track.talks).toContain(firstTalk)
            expect(track.talks).toContain(secondTalk)
            expect(track.talks).toContain(thirdTalk)
        })
        test('for Talk that maxes out the morning Session.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(180))
            const added = track.tryAdd(morningTalk)
            expect(added).toBe(true)
            expect(track.talks).toContain(morningTalk)
        })
        test('for Talk that maxes out the afternoon Session.', () => {
            const track = createTestTrack()
            const afterNoonTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(240))
            const added = track.tryAdd(afterNoonTalk)
            expect(added).toBe(true)
            expect(track.talks).toContain(afterNoonTalk)
        })
        test('for two Talks that max out the morning and afternoon Sessions.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(180))
            const afterNoonTalk = new Talk('Basic Arithmetics', Duration.fromMinutes(240))
            let added = track.tryAdd(morningTalk)
            expect(added).toBe(true)
            added = track.tryAdd(afterNoonTalk)
            expect(added).toBe(true)
            expect(track.talks).toContain(morningTalk)
            expect(track.talks).toContain(afterNoonTalk)
        })
    })
    describe('returns false and does not add Talk', () => {
        test('for Talk that is too long for both morning and afternoon Sessions.', () => {
            const track = createTestTrack()
            const talk = new Talk('The Importance of Reading The Manual', Duration.fromMinutes(360))
            let added = track.tryAdd(talk)
            expect(added).toBe(false)
            expect(track.talks.length).toBe(0)
        })
        test('for Talk that is too long for morning if afternoon is already maxed out.', () => {
            const track = createTestTrack()
            let added = track.tryAdd(new Talk('Taking up all the Time', Duration.fromMinutes(240)))
            expect(track.afternoon.timeLeft).toEqual(Duration.zero)
            added = track.tryAdd(new Talk('Taking up all the Time', Duration.fromMinutes(240)))
            expect(added).toBe(false)
            expect(track.talks.length).toBe(1)
        })
        test('for the first Talk that would overfill the Track in the morning.', () => {
            const track = createTestTrack()
            const afterNoonTalk = new Talk('Taking up all the Time', Duration.fromMinutes(240))
            track.tryAdd(afterNoonTalk)
            let added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(true)
            added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(true)
            added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(false)
            expect(track.talks.length).toBe(3)
        })
        test('for the first Talk that would overfill the Track in the afternoon.', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Taking up all the Time', Duration.fromMinutes(180))
            track.tryAdd(morningTalk)
            let added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(true)
            added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(true)
            added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(true)
            added = track.tryAdd(new Talk('Eighty Minute Talk', Duration.fromMinutes(80)))
            expect(added).toBe(false)
            expect(track.talks.length).toBe(4)
        })
    })
})

describe('Track.contains', () => {
    describe('returns true', () => {
        test('if morning Session contains talk with given id', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Morning', Duration.fromMinutes(180))
            expect(track.contains(morningTalk.id)).toBe(false)
            track.tryAdd(morningTalk)
            expect(track.contains(morningTalk.id)).toBe(true)
        })
        test('if afternoon session contains Talk with given id', () => {
            const track = createTestTrack()
            const afternoonTalk = new Talk('Afternoon', Duration.fromMinutes(240))
            expect(track.contains(afternoonTalk.id)).toBe(false)
            track.tryAdd(afternoonTalk)
            expect(track.contains(afternoonTalk.id)).toBe(true)
        })
    })
    describe('returns false', () => {
        test('for empty Track', () => {
            const track = createTestTrack()
            const talk = new Talk('Title', Duration.fromMinutes(10))
            expect(track.contains(talk.id)).toBe(false)
        })
        test('Track containing other Talks', () => {
            const track = createTestTrack()
            const talk = new Talk('Title', Duration.fromMinutes(10))
            const otherTalk = new Talk('Title', Duration.fromMinutes(10))
            track.tryAdd(otherTalk)
            expect(track.contains(otherTalk.id)).toBe(true)
            expect(track.contains(talk.id)).toBe(false)
        })
    })
})

describe('Track.remove', () => {
    describe('removes Talk with given id', () => {
        test('if it is contained in morning Session', () => {
            const track = createTestTrack()
            const morningTalk = new Talk('Morning', Duration.fromMinutes(180))
            track.tryAdd(morningTalk)
            expect(track.contains(morningTalk.id)).toBe(true)
            track.remove(morningTalk.id)
            expect(track.contains(morningTalk.id)).toBe(false)
        })
        test('if it is contained in afternoon Session', () => {
            const track = createTestTrack()
            const afternoonTalk = new Talk('Afternoon', Duration.fromMinutes(240))
            track.tryAdd(afternoonTalk)
            expect(track.contains(afternoonTalk.id)).toBe(true)
            track.remove(afternoonTalk.id)
            expect(track.contains(afternoonTalk.id)).toBe(false)
        })
    })
    describe('does not remove other Talks', () => {
        test('for well filled Track', () => {
            const track = createTestTrack()
            const talkToRemove = new Talk('Remove Me', Duration.fromHours(1))
            track.tryAdd(new Talk('Keep Me', Duration.fromHours(2)))
            track.tryAdd(new Talk('Keep Me, Too', Duration.fromHours(2)))
            track.tryAdd(new Talk('Keep Me, Also', Duration.fromHours(2)))
            track.tryAdd(talkToRemove)
            expect(track.contains(talkToRemove.id)).toBe(true)
            expect(track.talks.length).toBe(4)
            track.remove(talkToRemove.id)
            expect(track.contains(talkToRemove.id)).toBe(false)
            expect(track.talks.length).toBe(3)
        })
    })
})